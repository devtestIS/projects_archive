# language: ru

Функционал: компонент табличных данных
  Просмотр данных в виде таблицы
  Предосталяет сортировку по одной из колонок
  Предоставляет фильтрацию по одной или нескольким колонкам
  Предоставляет пагинацию с возможностью выбрать количество строк на одной странице
  Предоставляет возможность просмотра детальной информации по выбранной строке

  Предыстория:
    Допустим пользователь видит табличные данные
    И хочет сортировать и фильтровать данные
    И данные всегда выводятся постранично

  @success
  Структура сценария: данные выводятся в табличной форме
    Если данные приходят в компонент в виде списка объектов
    Тогда пользователь видит таблицу
    И количество строк соответствует количеству переданных объектов
    И атрибуты <request_name>, <request_method> и <request_count> соответствуют <provider> 

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные фильтруются по подстроке имени подсистемы без учета регистра
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле фильтра "filter_provider" 
    И пользователь назначил фильтр по <provider> со значением "ДОКу"
    Тогда пользователь видит отфильтрованный список строк таблицы
    И искомое вхождение подстроки в название подсистемы выделено

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Документооборот | Список документов   | GET            | 12            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Документооборот | Выгрузка истории    | GET            | 3             |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные фильтруются по подстроке имени запроса без учета регистра
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле фильтра "filter_request_name" 
    И пользователь назначил фильтр по <request_name> со значением "Объ"
    Тогда пользователь видит отфильтрованный список строк таблицы
    И искомое вхождение подстроки в название запроса выделено

    Пример:
      | provider        | request_name        | request_method | request_count |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Аналитика       | Освоенные объемы    | GET            | 11            |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные фильтруются по методу запроса
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле фильтра "filter_request_method" 
    И пользователь выбрал значение фильтра по <request_method> со значением "GET"
    Тогда пользователь видит отфильтрованный список строк таблицы

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные фильтруются по имени подсистемы и запроса
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле фильтра "filter_provider" 
    И пользователь видит поле фильтра "filter_request_name" 
    И пользователь выбрал значение фильтра по <provider> со значением "аналитика"
    И пользователь выбрал значение фильтра по <request_name> со значением "сводный"
    Тогда пользователь видит отфильтрованный список строк таблицы

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные сортируются по-алфавиту по имени подсистемы
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле сортировки "sort_provider" 
    И пользователь назначил сортировку по <provider> со значением "ASC"
    Тогда пользователь видит отфильтрованный список строк таблицы

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Список документов   | GET            | 12            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | Проекты         | Список задач        | GET            | 101           |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные сортируются по-алфавиту по имени подсистемы в обратном порядке
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле сортировки "sort_provider" 
    И пользователь назначил сортировку по <provider> со значением "DESC"
    Тогда пользователь видит отфильтрованный список строк таблицы

    Пример:
      | provider        | request_name        | request_method | request_count |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Проекты         | Список задач        | GET            | 101           |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | Документооборот | Список документов   | GET            | 12            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные сортируются по-алфавиту по имени запроса
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле сортировки "sort_request_name" 
    И пользователь назначил сортировку по <request_name> со значением "ASC"
    Тогда пользователь видит отфильтрованный список строк таблицы

    Пример:
      | provider        | request_name        | request_method | request_count |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Создание документа  | POST           | 2             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Список задач        | GET            | 101           |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные сортируются по-алфавиту по имени запроса в обратном порядке
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле сортировки "sort_request_name" 
    И пользователь назначил сортировку по <request_name> со значением "DESC"
    Тогда пользователь видит отфильтрованный список строк таблицы

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Проекты         | Список задач        | GET            | 101           |
      | Документооборот | Список документов   | GET            | 12            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные сортируются по количеству запросов
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле сортировки "sort_request_count" 
    И пользователь назначил сортировку по <request_count> со значением "ASC"
    Тогда пользователь видит отфильтрованный список строк таблицы

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Проекты         | Список задач        | GET            | 101           |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Документооборот | Создание документа  | POST           | 2             |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: данные сортируются по количеству запросов в обратном порядке
    Если данные приходят в компонент в виде списка объектов
    И пользователь видит поле сортировки "sort_request_count" 
    И пользователь назначил сортировку по <request_count> со значением "DESC"
    Тогда пользователь видит отфильтрованный список строк таблицы

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Проекты         | Список задач        | GET            | 101           |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | Документооборот | Список документов   | GET            | 12            |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Документооборот | Создание документа  | POST           | 2             |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: первая страница с пагинацией по дефолтному значению
    Если данные приходят в компонент в виде списка объектов
    И дефолтное значение количества записей на странице равно 5 
    И количество объектов в списке больше 5
    Тогда пользователь видит компонент пагинации
    И количество строк соответствует 5

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

  @success
  Структура сценария: последняя страница с пагинацией по дефолтному значению
    Если данные приходят в компонент в виде списка объектов
    И дефолтное значение количества записей на странице равно 3
    И количество объектов в списке больше 3
    И пользователь видит компонент пагинации
    И пользователь переключается на последнюю страницу в списке 
    Тогда пользователь видит последние 2 объекта из входящего списка

    Пример:
      | provider        | request_name        | request_method | request_count |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |

    Допустим что есть список следующих сущностей:
      | provider        | request_name        | request_method | request_count |
      | Аналитика       | Сводный отчет       | GET            | 5             |
      | Документооборот | Список документов   | GET            | 12            |
      | Проекты         | Обновление задачи   | PATCH          | 16            |
      | САПР            | Атрибуты объекта    | PATCH          | 32            |
      | Документооборот | Создание документа  | POST           | 2             |
      | Аналитика       | Освоенные объемы    | GET            | 11            |
      | Документооборот | Выгрузка истории    | GET            | 3             |
      | Проекты         | Список задач        | GET            | 101           |
